{"version":3,"file":"static/js/463.10ef1ea1.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://react-homework-template/./src/components/TextField/TextField.module.css?b6c9","components/TextField/TextField.jsx","hooks/useForm.js","components/LoginForm/fields.js","components/LoginForm/initialState.js","webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"TextField_wrap__e9m2f\",\"label\":\"TextField_label__vkJH3\",\"input\":\"TextField_input__Co8UC\"};","import { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport s from './TextField.module.css';\n\nconst TextField = ({label, handleChange, ...props}) => {\n  const id = useMemo(() => nanoid(), []);\n\n  return (\n    <div className={s.wrap}>\n      <label className={s.label} htmlFor={id}>{label}</label>\n      <input className={s.input} id={id} onChange={handleChange} {...props} />\n    </div>\n  )\n}\n\nexport default TextField;\n","import { useState, useCallback } from 'react';\n\nconst useForm = ({ initialState, onSubmit }) => {\n  const [state, setState] = useState({...initialState});\n\n  const handleChange = useCallback(e => {\n    const {name, value} = e.target;\n    setState(prevState => {\n      return {...prevState, [name]: value}\n    })\n  }, [setState]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({...state});\n    setState({...initialState});\n  };\n\n  return {state, setState, handleChange, handleSubmit}\n}\n\nexport default useForm;\n","const fields = {\n  email: {\n    type: \"email\",\n    name: \"email\",\n    required: true,\n    label: \"User email\",\n    placeholder: \"User email\",\n  },\n  password: {\n    type: \"password\",\n    name: \"password\",\n    required: true,\n    label: \"User password\",\n    placeholder: \"User password\",\n  },\n}\n\nexport default fields;\n","const initialState = {\n  email: '',\n  password: ''\n}\n\nexport default initialState;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__gPEx5\",\"button\":\"LoginForm_button__LodJg\"};","import { useDispatch } from 'react-redux';\n\nimport useForm from '../../hooks/useForm';\n\nimport TextField from '../TextField/TextField';\n\nimport fields from './fields';\nimport initialState from './initialState';\n\nimport { login } from '../../redux/auth/auth-operations';\n\nimport s from './LoginForm.module.css';\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const onSubmit = data => {\n    dispatch(login(data));\n  };\n\n  const {state, handleChange, handleSubmit} = useForm({initialState, onSubmit});\n  const {email, password} = state;\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <TextField value={email} handleChange={handleChange} {...fields.email} />\n      <TextField value={password} handleChange={handleChange} {...fields.password} />\n      <button className={s.button} type=\"submit\">Login</button>\n    </form>\n  )\n}\n\nexport default LoginForm;\n","import LoginForm from '../../components/LoginForm/LoginForm';\n\nconst LoginPage = () => {\n  return (\n    <div>\n      <LoginForm />\n    </div>\n  )\n}\n\nexport default LoginPage;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","label","handleChange","props","id","useMemo","nanoid","className","s","htmlFor","onChange","initialState","onSubmit","useState","state","setState","useCallback","e","name","value","prevState","handleSubmit","preventDefault","email","type","required","placeholder","password","dispatch","useDispatch","useForm","data","login","TextField","fields","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}